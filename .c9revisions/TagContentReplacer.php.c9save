{"ts":1359554359400,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/*\nAG - 04/04/08\nClass to remove simple tags such as h or div etc and replace the data \nbetween them according to a user function.\n*/\nClass TagContentReplacer\n{\n\n\t//Starting tag to look for\n\tprotected $_start_tag;\n\t//Ending tag to look for\n\tprotected $_end_tag;\n\t//Our initial content\n\tprotected $_old_content;\n\t//Our parsed and replaced data\n\tprotected $_new_content;\n\t//Holder for tag content\n\tprotected $_tag_content;\n\t//Search position in the content\n\tprotected $_needle;\n\t//String holding the user function to change the data\n\tprotected $_user_callback;\n\t//Array of parameters to pass to the user function\n\tprotected $_user_callback_params; \n\t\n\t\n\t//function TagContentReplacer($start_tag, $end_tag, $content, $user_callback, $user_callback_parameters=array())\n\tpublic function __construct()\t\n\t{\n\t\t$this->_init();\n\t}\t\t\t\n\n\t\n\tprotected function _init()\n\t{\n\t\t//Do anything extra or over ride this to save rewriting the constructor per extended class\n\t}\n\t\n\t\n\t//Pre prepare hook point\n\tprotected function _pre_prepare()\n\t{\n\t}\n\t\n\t\n\t//Post prepare hook point\n\tprotected function _post_prepare()\n\t{\n\t}\n\t\n\t\n\t//Reset function for use with code igniter so this can be a statically loaded library\n\tpublic function prepare($params)\n\t{\n\t\t//Set up our initial variables\n\t\t$this->_pre_prepare();\n\t\t$this->_start_tag = $params['start_tag'];\n\t\t$this->_end_tag = $params['end_tag'];\n\t\t$this->_old_content = $params['content'];\n\t\t$this->_new_content = \"\";\n\t\t$this->_tag_content = \"\";\n\t\t$this->_user_callback = $params['user_callback'];\n\t\t\n\t\tif (isset($params['user_callback_parameters']))\n\t\t\t$this->_user_callback_params = $params['user_callback_parameters'];\n\t\telse\n\t\t\t$this->_user_callback_params = array();\n\t\t\t\n\t\t$this->_needle = 0; //Set needle to start\n\t\t$this->_post_prepare();\n\t}\n\t\n\t\n\t//Function to replace the content of the tags\n\tprotected function _replace_tag_content()\n\t{\n\t\t//Call the user function with the tag content and append the returned data to\n\t\t$this->_user_callback_params['tagData'] = $this->_tag_content;\n\t\t$this->_new_content = $this->_new_content.call_user_func($this->_user_callback, $this->_user_callback_params);\n\t}\n\t\n\t\n\t//Function to find the next open tag\n\tprivate function _find_open_tag()\n\t{\n\t\t//Set the needle to the opening tag position\n\t\t$this->_needle = strpos($this->_old_content, $this->_start_tag);\n\t\t\n\t\t//If theres no more tags return false;\n\t\treturn ($this->_needle === false) ? false : true;\n\t}\n\t\n\t\n\t//Function to find the next ending tag\n\tprivate function _find_close_tag()\n\t{\n\t\t//Set the needle to the closing tag position\n\t\t$this->_needle = strpos($this->_old_content, $this->_end_tag);\n\t}\n\t\n\t\n\t//Special function to preserve non tag related content\n\tprivate function _preserve_content($endTag = false)\n\t{\n\t\t//Append pretag data to the new content\n\t\t$this->new_content = $this->new_content.substr($this->old_content, 0, $this->needle);\n\t\t\n\t\t//If we are doing an end tag remove it and chop anything before it out of the original content\n\t\tif ($endTag)\n\t\t\t\t$this->_old_content = substr($this->_old_content, $this->_needle + strlen($this->_end_tag));\n\t\telse\n\t\t\t\t$this->_old_content = substr($this->_old_content, $this->_needle + strlen($this->_start_tag)); //As above but if we are doing the openinig tag\n\t}\n\t\n\t\n\t//This takes care of grabbing the content of the tag\n\tprivate function get_tag_content()\n\t{\n\t\t//Store the content of the tag\n\t\t$this->_tag_content = substr($this->_old_content, 0, $this->_needle);\n\t\t//Strip the tag content from the original content\n\t\t$this->_old_content = substr($this->_old_content, $this->_needle);\n\t\t//Reset the needle\n\t\t$this->_needle = 0; \n\t}\n\t\n\t\n\t//Publicly accessible method. Used to process data\n\tpublic function process_content()\n\t{\n\t\t//While there are more tags to process...\n\t\twhile($this->find_open_tag())\n\t\t{\n\t\t\t$this->_preserve_content(); //Store anything before the start tag\n\t\t\t$this->_find_close_tag(); //Find the closing tag\n\t\t\t$this->_get_tag_content(); //Store the tag content\n\t\t\t$this->_replace_tag_content(); //Replace the tag content according to the user function\n\t\t\t$this->_preserve_content(true); //Preserve anything after the tag\n\t\t}\n\t\t\n\t\t//Append anything left after the last tag\n\t\t$this->_new_content = $this->_new_content.$this->_old_content;\n\t\t\n\t\treturn $this->_new_content;\n\t}\n\t\n}\n?>"]],"start1":0,"start2":0,"length1":0,"length2":4278}]],"length":4278}
{"contributors":[],"silentsave":true,"ts":1359554390629,"patch":[[{"diffs":[[0,"t()\t\n\t{\n"],[1,"        //Init func\n"],[0,"\t\t$this-"]],"start1":798,"start2":798,"length1":16,"length2":36}]],"length":4298,"saved":false}
